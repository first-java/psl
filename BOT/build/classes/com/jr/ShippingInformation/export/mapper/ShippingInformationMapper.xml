<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jr.ShippingInformation.export.dao.ShippingInformationDao">

	<!-- 自定义结果集,可以将sql语句查询的Resultset结果集与实体类一一对应 -->
	<resultMap type="com.jr.ShippingInformation.entity.ShippingInformation"
		id="ShippingInformation">
		<!-- 用于主键的映射 -->
		<!-- <id column="id" property="id" javaType="int" /> -->

		<result column="LOTNO" property="lotNo2" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="GRADE" property="grade" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="SIZEMIN" property="sizeMin" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="SIZEAVG" property="sizeAvg" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="SIZEMAX" property="sizeMax" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="QTY" property="qty" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="SPEC" property="spec" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="WORKID" property="workId" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="CREATETIME" property="createTime" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="user_Rrn" property="userRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="user_Id" property="userId" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="user_Desc" property="userDesc" javaType="java.lang.String"
			jdbcType="VARCHAR" />

		<result column="BARCODE_RRN" property="barcodeRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="BARCODE_STRING" property="barcodeString"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="LOGIN_RRN" property="loginRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="CREATE_TIMESTAMP" property="createTimeStamp"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="BARCODE_TYPE" property="barcodeType" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="JY_QTY" property="jyQty" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="STOCK_RRN" property="stockRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="BARCODE_ID" property="barcodeId" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="BARCODE_STATUS" property="barcodeStatus"
			javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="IN_TRANS" property="inTrans" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="RACKING_RRN" property="rackingRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="LAST_RRN" property="lastTrans" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="IN_CACHE_RRN" property="inCacheRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="CACHE_DATE" property="cacheDate" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="TRANS_RRN" property="transRrn" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="TRANS_TYPE" property="transType" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="TRANS_TYPE_ID" property="transTypeId" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="TRANS_QTY" property="transQty" javaType="java.lang.String"
			jdbcType="VARCHAR" />
		<result column="TRANS_TIMESTAMP" property="transTimeStamp"
			javaType="java.lang.String"></result>
		<result column="JY_TYPE" property="jyType" javaType="java.lang.String"></result>
		<result column="CUSTOMER_ID" property="customerId" javaType="java.lang.String"></result>
		<result column="out_Cache_Rrn" property="outCacheRrn" javaType="java.lang.String"></result>
		<result column="CUSTOMER_Desc" property="customerDesc"
			javaType="java.lang.String"></result>
		<result column="C_QTY" property="cQty" javaType="java.lang.String"></result>
		<result column="C_TYPE" property="cType" javaType="java.lang.String"></result>
		<result column="PO" property="po" javaType="java.lang.String"></result>
		<result column="WLD" property="wld" javaType="java.lang.String"></result>
		<result column="sqlDesc" property="sqlDesc" jdbcType="BLOB"
			typeHandler="com.jr.ShippingInformation.action.MyBlobTypeHandler"></result>




		<result column="SAN_TYPE" property="sanType" javaType="java.lang.String"></result>
		<result column="SAN_SPEC" property="sanSpec" javaType="java.lang.String"></result>
		<result column="SAN_QTY" property="sanQty" javaType="java.lang.String"></result>
		<result column="SAN_VF_MIN" property="sanVfMin" javaType="java.lang.String"></result>
		<result column="SAN_VF_AVG" property="sanVfAvg" javaType="java.lang.String"></result>
		<result column="SAN_VF_MAX" property="sanVfMax" javaType="java.lang.String"></result>
		<result column="SAN_VF_STD" property="sanVfStd" javaType="java.lang.String"></result>
		<result column="SAN_IV_MIN" property="sanIvMin" javaType="java.lang.String"></result>
		<result column="SAN_IV_AVG" property="sanIvAvg" javaType="java.lang.String"></result>
		<result column="SAN_IV_MAX" property="sanIvMax" javaType="java.lang.String"></result>
		<result column="SAN_IV_STD" property="sanIvStd" javaType="java.lang.String"></result>
		<result column="SAN_WD_MIN" property="sanWdMin" javaType="java.lang.String"></result>
		<result column="SAN_WD_AVG" property="sanWdAvg" javaType="java.lang.String"></result>
		<result column="SAN_WD_MAX" property="sanWdStd" javaType="java.lang.String"></result>
		<result column="SAN_WD_STD" property="sanWdMax" javaType="java.lang.String"></result>
		<result column="ORTHER" property="sanOther" javaType="java.lang.String"></result>
		<result column="SAN_DATE" property="sandate" javaType="java.lang.String"></result>


		<result column="SC_TYPE" property="scType" javaType="java.lang.String"></result>
		<result column="SAN_LOT" property="scLotNo" javaType="java.lang.String"></result>
		<result column="SC_QTY" property="scQty" javaType="java.lang.Integer"></result>

		<result column="LUM_BINTAPEID" property="binTapeId" javaType="java.lang.String"></result>
		<result column="LUM_SMARTLOT" property="smartLot" javaType="java.lang.String"></result>
		<result column="LUM_MESLOT" property="mesLot" javaType="java.lang.String"></result>
		<result column="LUM_PART" property="part" javaType="java.lang.String"></result>
		<result column="LUM_BIN" property="Bin" javaType="java.lang.String"></result>
		<result column="LUM_QTY" property="lmQty" javaType="java.lang.String"></result>



		<result column="SC_WD_MIN" property="scWdMin" javaType="java.lang.String"></result>
		<result column="SC_WD_TYP" property="scWdTyp" javaType="java.lang.String"></result>
		<result column="SC_WD_MAX" property="scWdMax" javaType="java.lang.String"></result>
		<result column="SC_PO_MIN" property="scPoMin" javaType="java.lang.String"></result>
		<result column="SC_PO_TYP" property="scPoTyp" javaType="java.lang.String"></result>
		<result column="SC_PO_MAX" property="scPoMax" javaType="java.lang.String"></result>
		<result column="SC_VF_MIN" property="scVfMin" javaType="java.lang.String"></result>
		<result column="SC_VF_TYP" property="scVfTyp" javaType="java.lang.String"></result>
		<result column="SC_VF_MAX" property="scVfMax" javaType="java.lang.String"></result>

		<result column="SC_IR_MIN" property="scIrMin" javaType="java.lang.String"></result>
		<result column="SC_IR_TYP" property="scIrTyp" javaType="java.lang.String"></result>
		<result column="SC_IR_MAX" property="scIrMax" javaType="java.lang.String"></result>
		<result column="SC_TOV_MIN" property="scTovMin" javaType="java.lang.String"></result>
		<result column="SC_TOV_TYP" property="scTovTyp" javaType="java.lang.String"></result>
		<result column="SC_TOV_MAX" property="scTovMax" javaType="java.lang.String"></result>



	</resultMap>
	<!-- 针对于不定向条件的查询，关键在于SQL语句的拼接，根据当前实际的参数来拼接SQL -->
	<insert id="save">
		insert into
		SYS_PSL.SHIPPINGINFORMATION(LOTNO,GRADE,SIZEMIN,SIZEAVG,SIZEMAX,QTY,SPEC,WORKID,CREATETIME)
		values(#{lotNo2,jdbcType=VARCHAR},#{grade,jdbcType=VARCHAR},#{sizeMin,jdbcType=VARCHAR},#{sizeAvg,jdbcType=VARCHAR}
		,#{sizeMax,jdbcType=VARCHAR},#{qty,jdbcType=VARCHAR},#{spec,jdbcType=VARCHAR},#{workId,jdbcType=VARCHAR}
		,to_char(sysdate,'YYYY-MM-DD hh24:mi:ss'))
	</insert>

	<select id="selectJl" resultType="java.lang.String" resultMap="ShippingInformation">
		SELECT twh.Bin_Unit_ID,twh.OutReason
		FROM tblWareHouse twh
		WHERE
		twh.Bin_Unit_ID='LP-180891123656'
	</select>
	<!-- 查询工号rrn -->
	<select id="selectWorkId" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select * from T_USER.L_USER t where
		user_id=#{userId,jdbcType=VARCHAR}
	</select>

	<select id="selectLotNo" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select t.*, t.rowid from SYS_PSL.SHIPPINGINFORMATION@PSL t
		where
		lotno=#{lotNo2,jdbcType=VARCHAR}
	</select>
	<select id="selectTransRrn" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select t.*, t.rowid from t_material.t_stock_in_history t
		where barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<select id="selectTransRrn1" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select t.*, t.rowid from t_material.t_stock_out_history t
		where barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<select id="selectCustomer" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select * FROM T_MATERIAL.T_CUSTOMER
	</select>

	<select id="selectCustomer1" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select customer_rrn as customerRrn FROM
		T_MATERIAL.T_CUSTOMER where
		customer_desc=#{customerDesc,jdbcType=VARCHAR}
	</select>

	<select id="selectStatus" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select * from t_material.t_stock where barcode_status='1'
		and barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<!-- 隔离状态 -->
	<select id="isolation" resultType="java.lang.String" resultMap="ShippingInformation">
		select * from T_RACKING where racking_rrn='1000001280' and
		racking_status='2'
	</select>
	<!-- 停用状态 -->
	<select id="outage" resultType="java.lang.String" resultMap="ShippingInformation">
		select * from T_RACKING where racking_rrn='1000001280' and
		racking_status='3'
	</select>
	<select id="selectStatus2" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select * from t_material.t_barcode where
		barcode_string=#{barcodeString,jdbcType=VARCHAR}
	</select>

	<select id="selectStatus1" resultType="java.lang.String"
		resultMap="ShippingInformation">
		select t.*, t.rowid from t_material.T_BARCODE t where
		barcode_String=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<!-- 查询barcode_rrn 序列号 -->
	<select id="selectBarcodeSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.barcode_rrn.NEXTVAL as barcodeRrn FROM
		DUAL
	</select>
	<!-- 查询t_material.stock_rrn序列号 -->
	<select id="selectStockSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.stock_rrn.NEXTVAL as stockRrn FROM DUAL
	</select>
	<!-- 查询t_material.stock_trans_rrn序列号 -->
	<select id="selectStockTransSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.stock_trans_rrn.NEXTVAL as stockTransRrn
		FROM DUAL
	</select>
	<!-- 查询t_material.racking_rrn序列号 -->
	<select id="selectRackingSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.racking_rrn.NEXTVAL as rackingRrn FROM
		DUAL
	</select>
	<!-- 查询t_material.out_cache_rrn序列号 -->
	<select id="selectOutCache" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.out_cache_rrn.NEXTVAL as outCacheRrn FROM
		DUAL
	</select>
	<!-- 查询t_material.in_cache_rrn序列号 -->
	<select id="selectInCacheSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.in_cache_rrn.NEXTVAL as inCacheRrn FROM
		DUAL
	</select>
	<!-- 查询t_material.customer_rrn序列号 -->
	<select id="selectCustomerSeq" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		SELECT
		T_MATERIAL.customer_rrn.NEXTVAL as customerRrn FROM
		DUAL
	</select>
	<select id="selectDetail" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		select *
		from t_material.t_stock_trans_detail where
		barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<select id="selectBarcodeId" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		select *
		from t_material.t_stock where
		barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</select>
	<update id="updateStock"
		parameterType="com.jr.ShippingInformation.entity.ShippingInformation">
		update t_material.t_stock
		set
		last_trans=#{lastTrans,jdbcType=VARCHAR},barcode_status='2' where
		barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</update>
	<update id="updateStockTrans"
		parameterType="com.jr.ShippingInformation.entity.ShippingInformation">
		update t_material.t_stock_trans
		set
		trans_type_id=#{transTypeId,jdbcType=VARCHAR},trans_qty=#{transQty,jdbcType=VARCHAR}
		where
		trans_rrn=#{transRrn,jdbcType=VARCHAR}
	</update>
	<update id="updateStockTransD"
		parameterType="com.jr.ShippingInformation.entity.ShippingInformation">
		update t_material.t_stock_trans_detail
		set
		trans_type_id=#{transTypeId,jdbcType=VARCHAR} where
		barcode_id=#{barcodeId,jdbcType=VARCHAR}
	</update>

	<!-- t_stock -->
	<insert id="saveLumileds" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.temp_lumileds
		(WAFER_IDS,MOTHER_LOT,BIN,QTY,createtime)

		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT #{counter.smartLot,jdbcType=VARCHAR}
			,#{counter.mesLot,jdbcType=VARCHAR}
			,#{counter.Bin,jdbcType=VARCHAR}
			,#{counter.lmQty,jdbcType=VARCHAR},sysdate
			FROM DUAL
			)
		</foreach>
	</insert>


	<select id="selectLumileds" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">

		select
		WAFER_IDS smartLot,MOTHER_LOT mesLot,BIN Bin ,QTY lmQty from
		t_material.temp_lumileds
		where
		WAFER_IDS=#{smartLot,jdbcType=VARCHAR}

	</select>
	<!-- t_stock -->
	<insert id="saveBarcode" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.T_BARCODE
		(BARCODE_RRN,BARCODE_STRING,LOGIN_RRN,CREATE_TIMESTAMP,BARCODE_TYPE,JY_QTY,JY_TYPE,C_QTY,C_TYPE,PO,WLD,SAN_TYPE,
		SAN_SPEC,SAN_QTY,SAN_VF_MIN,SAN_VF_AVG,SAN_VF_MAX,SAN_VF_STD,SAN_IV_MIN
		,SAN_IV_AVG,SAN_IV_MAX,SAN_IV_STD,SAN_WD_MIN,SAN_WD_AVG,SAN_WD_MAX,SAN_WD_STD,ORTHER,SAN_DATE,SC_TYPE,SC_QTY,SC_LOT,
		LUM_BINTAPEID,LUM_SMARTLOT,LUM_MESLOT,LUM_PART,LUM_BIN,LUM_QTY,
		SC_WD_MIN
		,SC_WD_TYP
		,SC_WD_MAX
		,SC_PO_MIN
		,SC_PO_TYP
		,SC_PO_MAX
		,SC_VF_MIN
		,SC_VF_TYP
		,SC_VF_MAX
		,SC_IR_MIN
		,SC_IR_TYP
		,SC_IR_MAX
		,SC_TOV_MIN
		,SC_TOV_TYP
		,SC_TOV_MAX
		)

		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT
			#{counter.barcodeRrn,jdbcType=VARCHAR},#{counter.barcodeString,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},sysdate,
			#{counter.barcodeType,jdbcType=VARCHAR},#{counter.jyQty,jdbcType=VARCHAR},#{counter.jyType,jdbcType=VARCHAR}
			,#{counter.cQty,jdbcType=VARCHAR},#{counter.cType,jdbcType=VARCHAR},#{counter.po,jdbcType=VARCHAR},#{counter.wld,jdbcType=VARCHAR}
			,#{counter.sanType,jdbcType=VARCHAR},#{counter.sanSpec,jdbcType=VARCHAR},#{counter.sanQty,jdbcType=VARCHAR},
			#{counter.sanVfMin,jdbcType=VARCHAR},#{counter.sanVfAvg,jdbcType=VARCHAR},#{counter.sanVfMax,jdbcType=VARCHAR},
			#{counter.sanVfStd,jdbcType=VARCHAR},#{counter.sanIvMin,jdbcType=VARCHAR}
			,#{counter.sanIvAvg,jdbcType=VARCHAR},#{counter.sanIvMax,jdbcType=VARCHAR},#{counter.sanIvStd,jdbcType=VARCHAR},
			#{counter.sanWdMin,jdbcType=VARCHAR},#{counter.sanWdAvg,jdbcType=VARCHAR},#{counter.sanWdStd,jdbcType=VARCHAR},
			#{counter.sanWdMax,jdbcType=VARCHAR},#{counter.sanOther,jdbcType=VARCHAR},#{counter.sandate,jdbcType=VARCHAR}
			,#{counter.scType,jdbcType=VARCHAR},#{counter.scQty,jdbcType=VARCHAR},#{counter.scLotNo,jdbcType=VARCHAR}
			,#{counter.binTapeId,jdbcType=VARCHAR}
			,#{counter.smartLot,jdbcType=VARCHAR}
			,#{counter.mesLot,jdbcType=VARCHAR}
			,#{counter.part,jdbcType=VARCHAR}
			,#{counter.Bin,jdbcType=VARCHAR}
			,#{counter.lmQty,jdbcType=VARCHAR}
			,#{counter.scWdMin,jdbcType=VARCHAR}
			,#{counter.scWdTyp,jdbcType=VARCHAR}
			,#{counter.scWdMax,jdbcType=VARCHAR}
			,#{counter.scPoMin,jdbcType=VARCHAR}
			,#{counter.scPoTyp,jdbcType=VARCHAR}
			,#{counter.scPoMax,jdbcType=VARCHAR}
			,#{counter.scVfMin,jdbcType=VARCHAR}
			,#{counter.scVfTyp,jdbcType=VARCHAR}
			,#{counter.scVfMax,jdbcType=VARCHAR}
			,#{counter.scIrMin,jdbcType=VARCHAR}
			,#{counter.scIrTyp,jdbcType=VARCHAR}
			,#{counter.scIrMax,jdbcType=VARCHAR}
			,#{counter.scTovMin,jdbcType=VARCHAR}
			,#{counter.scTovTyp,jdbcType=VARCHAR}
			,#{counter.scTovMax,jdbcType=VARCHAR}
			FROM DUAL
			)
		</foreach>
	</insert>
	<!-- t_stock -->
	<insert id="saveTrans" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.t_stock
		(stock_rrn,BARCODE_TYPE,BARCODE_RRN,BARCODE_ID,LOGIN_RRN,
		CREATE_TIMESTAMP,BARCODE_STATUS,IN_TRANS,RACKING_RRN,LAST_TRANS)
		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(
			SELECT
			#{counter.stockRrn,jdbcType=VARCHAR},#{counter.barcodeType,jdbcType=VARCHAR},
			#{counter.barcodeRrn,jdbcType=VARCHAR},#{counter.barcodeId,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},sysdate,
			#{counter.barcodeStatus,jdbcType=VARCHAR},#{counter.inTrans,jdbcType=VARCHAR},
			#{counter.rackingRrn,jdbcType=VARCHAR},#{counter.lastTrans,jdbcType=VARCHAR}
			FROM DUAL )
		</foreach>

	</insert>
	<!-- 時間查詢 -->
	<select id="queryTime" resultType="java.lang.String" resultMap="ShippingInformation"
		useCache="false" flushCache="true">
		select * from ( select 条码编号 as
		barcode_string,barcode_type ,min(出库时间)
		as cache_date,min(入库时间) as
		create_timestamp,min(jy_qty)||min(c_qty) as
		qty,min(jy_type)||min(c_type) as type
		from ( SELECT
		barcode_string as
		条码编号,barcode_type ,TO_DATE('','YYYY-MM-D HH24:MI:SS') as 出库时间
		,create_timestamp as 入库时间,jy_qty,jy_type,c_qty,c_type FROM
		t_material.T_BARCODE t WHERE
		barcode_type='4' or barcode_type='5'
		union
		all
		select barcode_id ,barcode_type ,cache_date as 出库时间
		,TO_DATE('','YYYY-MM-D
		HH24:MI:SS')as 入库时间,to_number('')as jy_qty,''as
		jy_type,to_number('')as c_qty,''as c_type from
		t_material.t_stock_out_history t WHERE
		barcode_type='4' or
		barcode_type='5' )
		group by 条码编号,barcode_type
		)
		<where>
			<if test="startTime!='' and startTime!=null">
				create_timestamp
				>
				to_date(#{startTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')

			</if>
			<if test="endTime!='' and endTime!=null">
				and
				create_timestamp
				&lt;
				to_date(#{endTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')
			</if>
		</where>
	</select>

	<!-- 時間查詢 -->
	<select id="queryTime1" resultType="java.lang.String" resultMap="ShippingInformation"
		useCache="false" flushCache="true">
		SELECT
		* FROM t_material.T_BARCODE t WHERE
		barcode_type=#{barcodeType,jdbcType=VARCHAR}

	</select>
	<!-- 時間查詢 -->
	<select id="queryOutTime" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		select
		barcode_id,jy_type,c_type,jy_qty,c_qty, cache_DATE from (select *
		from
		t_material.T_BARCODE t1 where
		BARCODE_TYPE=#{barcodeType,jdbcType=VARCHAR} and EXISTS(
		select *
		from
		t_material.t_stock_out_history t where
		t1.barcode_string=t.barcode_id)) s1 left join
		t_material.t_stock_out_history s on s1.barcode_string=s.barcode_id
		WHERE cache_date
		between
		to_date(#{startTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')
		and
		to_date(#{endTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')
	</select>
	<select id="queryOutTime1" resultType="java.lang.String"
		resultMap="ShippingInformation" useCache="false" flushCache="true">
		select
		barcode_id,jy_type,c_type,jy_qty,c_qty, cache_DATE from (select *
		from
		t_material.T_BARCODE t1 where
		BARCODE_TYPE=#{barcodeType,jdbcType=VARCHAR} and EXISTS(
		select *
		from
		t_material.t_stock_out_history t where
		t1.barcode_string=t.barcode_id)) s1 left join
		t_material.t_stock_out_history s on s1.barcode_string=s.barcode_id
		WHERE cache_date
		between
		to_date(#{startTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')
		and
		to_date(#{endTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss')
	</select>
	<select id="queryKu" resultType="java.lang.String" resultMap="ShippingInformation"
		useCache="false" flushCache="true">
		select * from t_material.T_BARCODE t1
		where BARCODE_TYPE=#{barcodeType,jdbcType=VARCHAR} and not EXISTS(
		select * from t_material.t_stock_out_history t where
		t1.barcode_string=t.barcode_id)
	</select>
	<!-- t_stock_in_history -->

	<insert id="saveStockIn" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.t_stock_in_history
		(in_cache_rrn,BARCODE_TYPE,BARCODE_RRN,BARCODE_ID,LOGIN_RRN,RACKING_RRN,stock_Rrn,cache_date,trans_rrn)

		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT
			#{counter.inCacheRrn,jdbcType=VARCHAR},#{counter.barcodeType,jdbcType=VARCHAR},
			#{counter.barcodeRrn,jdbcType=VARCHAR},#{counter.barcodeId,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},#{counter.rackingRrn,jdbcType=VARCHAR},
			#{counter.stockRrn,jdbcType=VARCHAR},sysdate,#{counter.transRrn,jdbcType=VARCHAR}
			FROM DUAL
			)
		</foreach>

	</insert>

	<!-- t_stock_trans -->
	<insert id="saveStockTrans" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.t_stock_trans
		(trans_rrn,trans_type,trans_type_id,trans_qty,login_rrn,trans_timestamp)

		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT
			#{counter.transRrn,jdbcType=VARCHAR},#{counter.transType,jdbcType=VARCHAR},
			#{counter.transTypeId,jdbcType=VARCHAR},#{counter.transQty,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},sysdate
			FROM DUAL
			)
		</foreach>

	</insert>

	<!-- t_stock_trans_detail -->
	<insert id="saveStockTransD" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.t_stock_trans_detail
		(trans_rrn,trans_type,trans_type_id,stock_rrn,barcode_type,barcode_rrn,barcode_id,login_rrn,racking_rrn)
		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT
			#{counter.transRrn,jdbcType=VARCHAR},#{counter.transType,jdbcType=VARCHAR},
			#{counter.transTypeId,jdbcType=VARCHAR},#{counter.stockRrn,jdbcType=VARCHAR},
			#{counter.barcodeType,jdbcType=VARCHAR},#{counter.barcodeRrn,jdbcType=VARCHAR},
			#{counter.barcodeId,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},#{counter.rackingRrn,jdbcType=VARCHAR}
			FROM DUAL
			)
		</foreach>
	</insert>
	<!--t_material.t_stock_out_history; -->
	<insert id="saveStockOut" parameterType="java.util.List"
		useGeneratedKeys="false">
		insert into
		t_material.t_stock_out_history
		(out_cache_rrn,barcode_type,barcode_rrn,barcode_id,login_rrn,racking_rrn,stock_rrn,cache_date,customer_rrn,trans_rrn)
		<foreach collection="list" item="counter" index="index"
			separator="union all">
			(SELECT
			#{counter.outCacheRrn,jdbcType=VARCHAR},#{counter.barcodeType,jdbcType=VARCHAR},
			#{counter.barcodeRrn,jdbcType=VARCHAR},#{counter.barcodeId,jdbcType=VARCHAR},
			#{counter.loginRrn,jdbcType=VARCHAR},#{counter.rackingRrn,jdbcType=VARCHAR},
			#{counter.stockRrn,jdbcType=VARCHAR},
			sysdate,#{counter.customerRrn,jdbcType=VARCHAR},#{counter.transRrn,jdbcType=VARCHAR}
			FROM DUAL
			)
		</foreach>
	</insert>
</mapper>